// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tickets.sql

package models

import (
	"context"
	"database/sql"
)

const getAllTickets = `-- name: GetAllTickets :many
SELECT id, content, created_at, title FROM TICKETS
`

func (q *Queries) GetAllTickets(ctx context.Context) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getAllTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTicket = `-- name: InsertTicket :one
INSERT INTO TICKETS
    (title, content)
VALUES
    (?1, ?2)
RETURNING ID
`

type InsertTicketParams struct {
	Title   string         `json:"title"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) InsertTicket(ctx context.Context, arg InsertTicketParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTicket, arg.Title, arg.Content)
	var id int64
	err := row.Scan(&id)
	return id, err
}
